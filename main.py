import google.generativeai as genai
import os
from telegram import ReplyKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ ===
TELEGRAM_TOKEN = "8265303363:AAFnwypiKOsEdE2DWTMFtHaxAXuk3XVns3E"
GEMINI_API_KEY = "AIzaSyDWkgsNJYHTk0k-q4zCrxuB_daLkzj7Cyk"

# === –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Gemini ===
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-2.5-flash")

# === –ú–µ–Ω—é ===
main_menu = [["–°—Ç—É–¥–µ–Ω—Ç", "IT-—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó"],
             ["–ö–æ–Ω—Ç–∞–∫—Ç–∏", "–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –Ω–µ–π—Ä–æ–º–µ—Ä–µ–∂—ñ"]]

# –ú–µ–Ω—é –¥–ª—è —Ä–µ–∂–∏–º—É —á–∞—Ç-–Ω–µ–π—Ä–æ–º–µ—Ä–µ–∂–∞
chat_menu = [["–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"]]

# === /start ===
def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é Google Gemini.\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=ReplyKeyboardMarkup(main_menu, resize_keyboard=True)
    )
    context.user_data["chat_mode"] = False
    context.user_data["chat_history"] = []

# === –í–∏–∫–ª–∏–∫ Gemini ===
def ask_gemini(prompt, history):
    try:
        # –ø—Ä–∏–±—Ä–∞–Ω–æ "–í—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é"
        chat = model.start_chat(history=history)
        response = chat.send_message(prompt)
        return response.text
    except Exception as e:
        print("[Gemini ERROR]", e)
        return "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑ –±–æ–∫—É Gemini API."

# === –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ===
def handle_message(update: Update, context: CallbackContext):
    text = update.message.text.strip()

    # –û—Å–Ω–æ–≤–Ω–µ –º–µ–Ω—é
    if text == "–°—Ç—É–¥–µ–Ω—Ç":
        update.message.reply_text("üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç: –ü—Ä–æ—Ö–æ—Ä–µ–Ω–∫–æ –í.–î.\n–ì—Ä—É–ø–∞: –Ü–û-–∑21")
        context.user_data["chat_mode"] = False

    elif text == "IT-—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó":
        update.message.reply_text("üí° Python, HTML, CSS, JavaScript")
        context.user_data["chat_mode"] = False

    elif text == "–ö–æ–Ω—Ç–∞–∫—Ç–∏":
        update.message.reply_text("üìû –¢–µ–ª–µ—Ñ–æ–Ω: +380674573478\nüìß Email: vladprokhorenko721@gmai.com")
        context.user_data["chat_mode"] = False

    elif text == "–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –Ω–µ–π—Ä–æ–º–µ—Ä–µ–∂—ñ":
        update.message.reply_text(
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤—ñ–π –∑–∞–ø–∏—Ç ‚Äî —è –≤—ñ–¥–ø–æ–≤—ñ–º —á–µ—Ä–µ–∑ Google Gemini:",
            reply_markup=ReplyKeyboardMarkup(chat_menu, resize_keyboard=True)
        )
        context.user_data["chat_mode"] = True
        context.user_data["chat_history"] = []

    # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑ —Ä–µ–∂–∏–º—É —á–∞—Ç
    elif text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é":
        update.message.reply_text(
            "‚¨ÜÔ∏è –ü–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:",
            reply_markup=ReplyKeyboardMarkup(main_menu, resize_keyboard=True)
        )
        context.user_data["chat_mode"] = False
        context.user_data["chat_history"] = []

    # –†–µ–∂–∏–º —á–∞—Ç –∑ –Ω–µ–π—Ä–æ–º–µ—Ä–µ–∂–µ—é
    elif context.user_data.get("chat_mode", False):
        update.message.chat.send_action(action="typing")
        try:
            history = context.user_data.get("chat_history", [])
            reply = ask_gemini(text, history)
            history.append({"role": "user", "parts": [text]})
            history.append({"role": "model", "parts": [reply]})
            context.user_data["chat_history"] = history
            update.message.reply_text(reply)
        except Exception as e:
            update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ Gemini.")
            print(e)
    else:
        update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é ‚¨ÜÔ∏è")

# === –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ===
def main():
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ (Gemini API online)")
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
